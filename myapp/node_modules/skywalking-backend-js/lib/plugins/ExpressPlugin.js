"use strict";
/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ContextManager_1 = tslib_1.__importDefault(require("../trace/context/ContextManager"));
var Component_1 = require("../trace/Component");
var Tag_1 = tslib_1.__importDefault(require("../Tag"));
var Tracing_pb_1 = require("../proto/language-agent/Tracing_pb");
var ContextCarrier_1 = require("../trace/context/ContextCarrier");
var on_finished_1 = tslib_1.__importDefault(require("on-finished"));
var ExpressPlugin = /** @class */ (function () {
    function ExpressPlugin() {
        this.module = 'express';
        this.versions = '*';
    }
    ExpressPlugin.prototype.install = function () {
        this.interceptServerRequest();
    };
    ExpressPlugin.prototype.interceptServerRequest = function () {
        var router = require('express/lib/router');
        var _handle = router.handle;
        router.handle = function (req, res, out) {
            var _this = this;
            var headers = req.rawHeaders || [];
            var headersMap = {};
            for (var i = 0; i < headers.length / 2; i += 2) {
                headersMap[headers[i]] = headers[i + 1];
            }
            var carrier = ContextCarrier_1.ContextCarrier.from(headersMap);
            var operation = (req.url || '/').replace(/\?.*/g, '');
            var span = ContextManager_1.default.current.newEntrySpan(operation, carrier).start();
            var stopped = 0;
            var stopIfNotStopped = function (err) {
                if (!stopped++) {
                    span.stop();
                    span.tag(Tag_1.default.httpStatusCode(res.statusCode));
                    if (res.statusCode && res.statusCode >= 400) {
                        span.errored = true;
                    }
                    if (err) {
                        span.error(err);
                    }
                    if (res.statusMessage) {
                        span.tag(Tag_1.default.httpStatusMsg(res.statusMessage));
                    }
                }
            };
            try {
                span.layer = Tracing_pb_1.SpanLayer.HTTP;
                span.component = Component_1.Component.EXPRESS;
                span.peer = req.headers.host || '';
                span.tag(Tag_1.default.httpURL(span.peer + req.url));
                var ret = _handle.call(this, req, res, function (err) {
                    if (err) {
                        span.error(err);
                    }
                    else {
                        span.errored = true;
                    }
                    out.call(_this, err);
                    stopped -= 1; // skip first stop attempt, make sure stop executes once status code and message is set
                });
                on_finished_1.default(res, stopIfNotStopped); // this must run after any handlers deferred in 'out'
                return ret;
            }
            catch (e) {
                stopIfNotStopped(e);
                throw e;
            }
        };
    };
    return ExpressPlugin;
}());
// noinspection JSUnusedGlobalSymbols
exports.default = new ExpressPlugin();
//# sourceMappingURL=ExpressPlugin.js.map