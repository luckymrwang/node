"use strict";
/*!
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var url_1 = require("url");
var ContextManager_1 = tslib_1.__importDefault(require("../trace/context/ContextManager"));
var Component_1 = require("../trace/Component");
var Tag_1 = tslib_1.__importDefault(require("../Tag"));
var Tracing_pb_1 = require("../proto/language-agent/Tracing_pb");
var logging_1 = require("../logging");
var logger = logging_1.createLogger(__filename);
var AxiosPlugin = /** @class */ (function () {
    function AxiosPlugin() {
        this.module = 'axios';
        this.versions = '*';
        this.axios = require('axios').default;
    }
    AxiosPlugin.prototype.install = function () {
        if (logger.isDebugEnabled()) {
            logger.debug('installing axios plugin');
        }
        this.interceptClientRequest();
    };
    AxiosPlugin.prototype.interceptClientRequest = function () {
        var copyStatusAndStop = function (span, response) {
            if (response) {
                if (response.status) {
                    span.tag(Tag_1.default.httpStatusCode(response.status));
                }
                if (response.statusText) {
                    span.tag(Tag_1.default.httpStatusMsg(response.statusText));
                }
            }
            span.stop();
        };
        this.axios.interceptors.request.use(function (config) {
            config.span.resync();
            config.span.inject().items.forEach(function (item) {
                config.headers.common[item.key] = item.value;
            });
            return config;
        }, function (error) {
            error.config.span.error(error);
            error.config.span.stop();
            return Promise.reject(error);
        });
        this.axios.interceptors.response.use(function (response) {
            copyStatusAndStop(response.config.span, response);
            return response;
        }, function (error) {
            error.config.span.error(error);
            copyStatusAndStop(error.config.span, error.response);
            return Promise.reject(error);
        });
        var _request = this.axios.Axios.prototype.request;
        this.axios.Axios.prototype.request = function (config) {
            var _a = new url_1.URL(config.url), host = _a.host, operation = _a.pathname; // TODO: this may throw invalid URL
            var span = ContextManager_1.default.current.newExitSpan(operation, host).start();
            try {
                span.component = Component_1.Component.AXIOS; // TODO: add Component.AXIOS (to main Skywalking project)
                span.layer = Tracing_pb_1.SpanLayer.HTTP;
                span.peer = host;
                span.tag(Tag_1.default.httpURL(host + operation));
                span.async();
                return _request.call(this, tslib_1.__assign(tslib_1.__assign({}, config), { span: span }));
            }
            catch (e) {
                span.error(e);
                span.stop();
                throw e;
            }
        };
    };
    return AxiosPlugin;
}());
// noinspection JSUnusedGlobalSymbols
exports.default = new AxiosPlugin();
//# sourceMappingURL=AxiosPlugin.js.map