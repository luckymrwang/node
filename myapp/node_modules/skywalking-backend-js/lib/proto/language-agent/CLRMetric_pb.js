"use strict";
// source: language-agent/CLRMetric.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var common_Common_pb = require('../common/Common_pb.js');
goog.object.extend(proto, common_Common_pb);
goog.exportSymbol('proto.CLRMetric', null, global);
goog.exportSymbol('proto.CLRMetricCollection', null, global);
goog.exportSymbol('proto.ClrGC', null, global);
goog.exportSymbol('proto.ClrThread', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLRMetricCollection = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.CLRMetricCollection.repeatedFields_, null);
};
goog.inherits(proto.CLRMetricCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.CLRMetricCollection.displayName = 'proto.CLRMetricCollection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLRMetric = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CLRMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.CLRMetric.displayName = 'proto.CLRMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClrGC = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClrGC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ClrGC.displayName = 'proto.ClrGC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClrThread = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClrThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ClrThread.displayName = 'proto.ClrThread';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CLRMetricCollection.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.CLRMetricCollection.prototype.toObject = function (opt_includeInstance) {
        return proto.CLRMetricCollection.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.CLRMetricCollection} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.CLRMetricCollection.toObject = function (includeInstance, msg) {
        var f, obj = {
            metricsList: jspb.Message.toObjectList(msg.getMetricsList(), proto.CLRMetric.toObject, includeInstance),
            service: jspb.Message.getFieldWithDefault(msg, 2, ""),
            serviceinstance: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLRMetricCollection}
 */
proto.CLRMetricCollection.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.CLRMetricCollection;
    return proto.CLRMetricCollection.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLRMetricCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLRMetricCollection}
 */
proto.CLRMetricCollection.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.CLRMetric;
                reader.readMessage(value, proto.CLRMetric.deserializeBinaryFromReader);
                msg.addMetrics(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setService(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setServiceinstance(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLRMetricCollection.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.CLRMetricCollection.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLRMetricCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLRMetricCollection.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMetricsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.CLRMetric.serializeBinaryToWriter);
    }
    f = message.getService();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getServiceinstance();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * repeated CLRMetric metrics = 1;
 * @return {!Array<!proto.CLRMetric>}
 */
proto.CLRMetricCollection.prototype.getMetricsList = function () {
    return /** @type{!Array<!proto.CLRMetric>} */ (jspb.Message.getRepeatedWrapperField(this, proto.CLRMetric, 1));
};
/**
 * @param {!Array<!proto.CLRMetric>} value
 * @return {!proto.CLRMetricCollection} returns this
*/
proto.CLRMetricCollection.prototype.setMetricsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.CLRMetric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CLRMetric}
 */
proto.CLRMetricCollection.prototype.addMetrics = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CLRMetric, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CLRMetricCollection} returns this
 */
proto.CLRMetricCollection.prototype.clearMetricsList = function () {
    return this.setMetricsList([]);
};
/**
 * optional string service = 2;
 * @return {string}
 */
proto.CLRMetricCollection.prototype.getService = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.CLRMetricCollection} returns this
 */
proto.CLRMetricCollection.prototype.setService = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string serviceInstance = 3;
 * @return {string}
 */
proto.CLRMetricCollection.prototype.getServiceinstance = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.CLRMetricCollection} returns this
 */
proto.CLRMetricCollection.prototype.setServiceinstance = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.CLRMetric.prototype.toObject = function (opt_includeInstance) {
        return proto.CLRMetric.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.CLRMetric} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.CLRMetric.toObject = function (includeInstance, msg) {
        var f, obj = {
            time: jspb.Message.getFieldWithDefault(msg, 1, 0),
            cpu: (f = msg.getCpu()) && common_Common_pb.CPU.toObject(includeInstance, f),
            gc: (f = msg.getGc()) && proto.ClrGC.toObject(includeInstance, f),
            thread: (f = msg.getThread()) && proto.ClrThread.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLRMetric}
 */
proto.CLRMetric.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.CLRMetric;
    return proto.CLRMetric.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLRMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLRMetric}
 */
proto.CLRMetric.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTime(value);
                break;
            case 2:
                var value = new common_Common_pb.CPU;
                reader.readMessage(value, common_Common_pb.CPU.deserializeBinaryFromReader);
                msg.setCpu(value);
                break;
            case 3:
                var value = new proto.ClrGC;
                reader.readMessage(value, proto.ClrGC.deserializeBinaryFromReader);
                msg.setGc(value);
                break;
            case 4:
                var value = new proto.ClrThread;
                reader.readMessage(value, proto.ClrThread.deserializeBinaryFromReader);
                msg.setThread(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLRMetric.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.CLRMetric.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLRMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLRMetric.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTime();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getCpu();
    if (f != null) {
        writer.writeMessage(2, f, common_Common_pb.CPU.serializeBinaryToWriter);
    }
    f = message.getGc();
    if (f != null) {
        writer.writeMessage(3, f, proto.ClrGC.serializeBinaryToWriter);
    }
    f = message.getThread();
    if (f != null) {
        writer.writeMessage(4, f, proto.ClrThread.serializeBinaryToWriter);
    }
};
/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.CLRMetric.prototype.getTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.CLRMetric} returns this
 */
proto.CLRMetric.prototype.setTime = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional CPU cpu = 2;
 * @return {?proto.CPU}
 */
proto.CLRMetric.prototype.getCpu = function () {
    return /** @type{?proto.CPU} */ (jspb.Message.getWrapperField(this, common_Common_pb.CPU, 2));
};
/**
 * @param {?proto.CPU|undefined} value
 * @return {!proto.CLRMetric} returns this
*/
proto.CLRMetric.prototype.setCpu = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.CLRMetric} returns this
 */
proto.CLRMetric.prototype.clearCpu = function () {
    return this.setCpu(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLRMetric.prototype.hasCpu = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional ClrGC gc = 3;
 * @return {?proto.ClrGC}
 */
proto.CLRMetric.prototype.getGc = function () {
    return /** @type{?proto.ClrGC} */ (jspb.Message.getWrapperField(this, proto.ClrGC, 3));
};
/**
 * @param {?proto.ClrGC|undefined} value
 * @return {!proto.CLRMetric} returns this
*/
proto.CLRMetric.prototype.setGc = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.CLRMetric} returns this
 */
proto.CLRMetric.prototype.clearGc = function () {
    return this.setGc(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLRMetric.prototype.hasGc = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional ClrThread thread = 4;
 * @return {?proto.ClrThread}
 */
proto.CLRMetric.prototype.getThread = function () {
    return /** @type{?proto.ClrThread} */ (jspb.Message.getWrapperField(this, proto.ClrThread, 4));
};
/**
 * @param {?proto.ClrThread|undefined} value
 * @return {!proto.CLRMetric} returns this
*/
proto.CLRMetric.prototype.setThread = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.CLRMetric} returns this
 */
proto.CLRMetric.prototype.clearThread = function () {
    return this.setThread(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLRMetric.prototype.hasThread = function () {
    return jspb.Message.getField(this, 4) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClrGC.prototype.toObject = function (opt_includeInstance) {
        return proto.ClrGC.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClrGC} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClrGC.toObject = function (includeInstance, msg) {
        var f, obj = {
            gen0collectcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
            gen1collectcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
            gen2collectcount: jspb.Message.getFieldWithDefault(msg, 3, 0),
            heapmemory: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClrGC}
 */
proto.ClrGC.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClrGC;
    return proto.ClrGC.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClrGC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClrGC}
 */
proto.ClrGC.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setGen0collectcount(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setGen1collectcount(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setGen2collectcount(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setHeapmemory(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClrGC.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClrGC.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClrGC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClrGC.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getGen0collectcount();
    if (f !== 0) {
        writer.writeInt64(1, f);
    }
    f = message.getGen1collectcount();
    if (f !== 0) {
        writer.writeInt64(2, f);
    }
    f = message.getGen2collectcount();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
    f = message.getHeapmemory();
    if (f !== 0) {
        writer.writeInt64(4, f);
    }
};
/**
 * optional int64 Gen0CollectCount = 1;
 * @return {number}
 */
proto.ClrGC.prototype.getGen0collectcount = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrGC} returns this
 */
proto.ClrGC.prototype.setGen0collectcount = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int64 Gen1CollectCount = 2;
 * @return {number}
 */
proto.ClrGC.prototype.getGen1collectcount = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrGC} returns this
 */
proto.ClrGC.prototype.setGen1collectcount = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int64 Gen2CollectCount = 3;
 * @return {number}
 */
proto.ClrGC.prototype.getGen2collectcount = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrGC} returns this
 */
proto.ClrGC.prototype.setGen2collectcount = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int64 HeapMemory = 4;
 * @return {number}
 */
proto.ClrGC.prototype.getHeapmemory = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrGC} returns this
 */
proto.ClrGC.prototype.setHeapmemory = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClrThread.prototype.toObject = function (opt_includeInstance) {
        return proto.ClrThread.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClrThread} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClrThread.toObject = function (includeInstance, msg) {
        var f, obj = {
            availablecompletionportthreads: jspb.Message.getFieldWithDefault(msg, 1, 0),
            availableworkerthreads: jspb.Message.getFieldWithDefault(msg, 2, 0),
            maxcompletionportthreads: jspb.Message.getFieldWithDefault(msg, 3, 0),
            maxworkerthreads: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClrThread}
 */
proto.ClrThread.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClrThread;
    return proto.ClrThread.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClrThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClrThread}
 */
proto.ClrThread.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAvailablecompletionportthreads(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAvailableworkerthreads(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxcompletionportthreads(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMaxworkerthreads(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClrThread.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClrThread.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClrThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClrThread.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAvailablecompletionportthreads();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getAvailableworkerthreads();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getMaxcompletionportthreads();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
    f = message.getMaxworkerthreads();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
};
/**
 * optional int32 AvailableCompletionPortThreads = 1;
 * @return {number}
 */
proto.ClrThread.prototype.getAvailablecompletionportthreads = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrThread} returns this
 */
proto.ClrThread.prototype.setAvailablecompletionportthreads = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int32 AvailableWorkerThreads = 2;
 * @return {number}
 */
proto.ClrThread.prototype.getAvailableworkerthreads = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrThread} returns this
 */
proto.ClrThread.prototype.setAvailableworkerthreads = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int32 MaxCompletionPortThreads = 3;
 * @return {number}
 */
proto.ClrThread.prototype.getMaxcompletionportthreads = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrThread} returns this
 */
proto.ClrThread.prototype.setMaxcompletionportthreads = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int32 MaxWorkerThreads = 4;
 * @return {number}
 */
proto.ClrThread.prototype.getMaxworkerthreads = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.ClrThread} returns this
 */
proto.ClrThread.prototype.setMaxworkerthreads = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=CLRMetric_pb.js.map