"use strict";
// source: profile/Profile.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var common_Common_pb = require('../common/Common_pb.js');
goog.object.extend(proto, common_Common_pb);
goog.exportSymbol('proto.ProfileTaskCommandQuery', null, global);
goog.exportSymbol('proto.ProfileTaskFinishReport', null, global);
goog.exportSymbol('proto.ThreadSnapshot', null, global);
goog.exportSymbol('proto.ThreadStack', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProfileTaskCommandQuery = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProfileTaskCommandQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ProfileTaskCommandQuery.displayName = 'proto.ProfileTaskCommandQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThreadSnapshot = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThreadSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ThreadSnapshot.displayName = 'proto.ThreadSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThreadStack = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ThreadStack.repeatedFields_, null);
};
goog.inherits(proto.ThreadStack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ThreadStack.displayName = 'proto.ThreadStack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProfileTaskFinishReport = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProfileTaskFinishReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ProfileTaskFinishReport.displayName = 'proto.ProfileTaskFinishReport';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ProfileTaskCommandQuery.prototype.toObject = function (opt_includeInstance) {
        return proto.ProfileTaskCommandQuery.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ProfileTaskCommandQuery} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ProfileTaskCommandQuery.toObject = function (includeInstance, msg) {
        var f, obj = {
            service: jspb.Message.getFieldWithDefault(msg, 1, ""),
            serviceinstance: jspb.Message.getFieldWithDefault(msg, 2, ""),
            lastcommandtime: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProfileTaskCommandQuery}
 */
proto.ProfileTaskCommandQuery.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ProfileTaskCommandQuery;
    return proto.ProfileTaskCommandQuery.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProfileTaskCommandQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProfileTaskCommandQuery}
 */
proto.ProfileTaskCommandQuery.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setService(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setServiceinstance(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLastcommandtime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProfileTaskCommandQuery.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ProfileTaskCommandQuery.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProfileTaskCommandQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileTaskCommandQuery.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getService();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getServiceinstance();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getLastcommandtime();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
};
/**
 * optional string service = 1;
 * @return {string}
 */
proto.ProfileTaskCommandQuery.prototype.getService = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProfileTaskCommandQuery} returns this
 */
proto.ProfileTaskCommandQuery.prototype.setService = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string serviceInstance = 2;
 * @return {string}
 */
proto.ProfileTaskCommandQuery.prototype.getServiceinstance = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProfileTaskCommandQuery} returns this
 */
proto.ProfileTaskCommandQuery.prototype.setServiceinstance = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional int64 lastCommandTime = 3;
 * @return {number}
 */
proto.ProfileTaskCommandQuery.prototype.getLastcommandtime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.ProfileTaskCommandQuery} returns this
 */
proto.ProfileTaskCommandQuery.prototype.setLastcommandtime = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ThreadSnapshot.prototype.toObject = function (opt_includeInstance) {
        return proto.ThreadSnapshot.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ThreadSnapshot} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ThreadSnapshot.toObject = function (includeInstance, msg) {
        var f, obj = {
            taskid: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tracesegmentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
            time: jspb.Message.getFieldWithDefault(msg, 3, 0),
            sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),
            stack: (f = msg.getStack()) && proto.ThreadStack.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThreadSnapshot}
 */
proto.ThreadSnapshot.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ThreadSnapshot;
    return proto.ThreadSnapshot.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThreadSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThreadSnapshot}
 */
proto.ThreadSnapshot.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setTaskid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTracesegmentid(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTime(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setSequence(value);
                break;
            case 5:
                var value = new proto.ThreadStack;
                reader.readMessage(value, proto.ThreadStack.deserializeBinaryFromReader);
                msg.setStack(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThreadSnapshot.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ThreadSnapshot.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThreadSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThreadSnapshot.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTaskid();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTracesegmentid();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTime();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
    f = message.getSequence();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
    f = message.getStack();
    if (f != null) {
        writer.writeMessage(5, f, proto.ThreadStack.serializeBinaryToWriter);
    }
};
/**
 * optional string taskId = 1;
 * @return {string}
 */
proto.ThreadSnapshot.prototype.getTaskid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.ThreadSnapshot} returns this
 */
proto.ThreadSnapshot.prototype.setTaskid = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string traceSegmentId = 2;
 * @return {string}
 */
proto.ThreadSnapshot.prototype.getTracesegmentid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.ThreadSnapshot} returns this
 */
proto.ThreadSnapshot.prototype.setTracesegmentid = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional int64 time = 3;
 * @return {number}
 */
proto.ThreadSnapshot.prototype.getTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.ThreadSnapshot} returns this
 */
proto.ThreadSnapshot.prototype.setTime = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int32 sequence = 4;
 * @return {number}
 */
proto.ThreadSnapshot.prototype.getSequence = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.ThreadSnapshot} returns this
 */
proto.ThreadSnapshot.prototype.setSequence = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional ThreadStack stack = 5;
 * @return {?proto.ThreadStack}
 */
proto.ThreadSnapshot.prototype.getStack = function () {
    return /** @type{?proto.ThreadStack} */ (jspb.Message.getWrapperField(this, proto.ThreadStack, 5));
};
/**
 * @param {?proto.ThreadStack|undefined} value
 * @return {!proto.ThreadSnapshot} returns this
*/
proto.ThreadSnapshot.prototype.setStack = function (value) {
    return jspb.Message.setWrapperField(this, 5, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.ThreadSnapshot} returns this
 */
proto.ThreadSnapshot.prototype.clearStack = function () {
    return this.setStack(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThreadSnapshot.prototype.hasStack = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ThreadStack.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ThreadStack.prototype.toObject = function (opt_includeInstance) {
        return proto.ThreadStack.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ThreadStack} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ThreadStack.toObject = function (includeInstance, msg) {
        var f, obj = {
            codesignaturesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThreadStack}
 */
proto.ThreadStack.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ThreadStack;
    return proto.ThreadStack.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThreadStack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThreadStack}
 */
proto.ThreadStack.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addCodesignatures(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThreadStack.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ThreadStack.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThreadStack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThreadStack.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCodesignaturesList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
};
/**
 * repeated string codeSignatures = 1;
 * @return {!Array<string>}
 */
proto.ThreadStack.prototype.getCodesignaturesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.ThreadStack} returns this
 */
proto.ThreadStack.prototype.setCodesignaturesList = function (value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ThreadStack} returns this
 */
proto.ThreadStack.prototype.addCodesignatures = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ThreadStack} returns this
 */
proto.ThreadStack.prototype.clearCodesignaturesList = function () {
    return this.setCodesignaturesList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ProfileTaskFinishReport.prototype.toObject = function (opt_includeInstance) {
        return proto.ProfileTaskFinishReport.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ProfileTaskFinishReport} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ProfileTaskFinishReport.toObject = function (includeInstance, msg) {
        var f, obj = {
            service: jspb.Message.getFieldWithDefault(msg, 1, ""),
            serviceinstance: jspb.Message.getFieldWithDefault(msg, 2, ""),
            taskid: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProfileTaskFinishReport}
 */
proto.ProfileTaskFinishReport.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ProfileTaskFinishReport;
    return proto.ProfileTaskFinishReport.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProfileTaskFinishReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProfileTaskFinishReport}
 */
proto.ProfileTaskFinishReport.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setService(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setServiceinstance(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setTaskid(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProfileTaskFinishReport.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ProfileTaskFinishReport.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProfileTaskFinishReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProfileTaskFinishReport.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getService();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getServiceinstance();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTaskid();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string service = 1;
 * @return {string}
 */
proto.ProfileTaskFinishReport.prototype.getService = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProfileTaskFinishReport} returns this
 */
proto.ProfileTaskFinishReport.prototype.setService = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string serviceInstance = 2;
 * @return {string}
 */
proto.ProfileTaskFinishReport.prototype.getServiceinstance = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProfileTaskFinishReport} returns this
 */
proto.ProfileTaskFinishReport.prototype.setServiceinstance = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string taskId = 3;
 * @return {string}
 */
proto.ProfileTaskFinishReport.prototype.getTaskid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProfileTaskFinishReport} returns this
 */
proto.ProfileTaskFinishReport.prototype.setTaskid = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=Profile_pb.js.map