// GENERATED CODE -- DO NOT EDIT!
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
'use strict';
var grpc = require('grpc');
var service$mesh$probe_service$mesh_pb = require('../service-mesh-probe/service-mesh_pb.js');
var common_Common_pb = require('../common/Common_pb.js');
function serialize_MeshProbeDownstream(arg) {
    if (!(arg instanceof service$mesh$probe_service$mesh_pb.MeshProbeDownstream)) {
        throw new Error('Expected argument of type MeshProbeDownstream');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_MeshProbeDownstream(buffer_arg) {
    return service$mesh$probe_service$mesh_pb.MeshProbeDownstream.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_ServiceMeshMetric(arg) {
    if (!(arg instanceof service$mesh$probe_service$mesh_pb.ServiceMeshMetric)) {
        throw new Error('Expected argument of type ServiceMeshMetric');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_ServiceMeshMetric(buffer_arg) {
    return service$mesh$probe_service$mesh_pb.ServiceMeshMetric.deserializeBinary(new Uint8Array(buffer_arg));
}
var ServiceMeshMetricServiceService = exports.ServiceMeshMetricServiceService = {
    collect: {
        path: '/ServiceMeshMetricService/collect',
        requestStream: true,
        responseStream: false,
        requestType: service$mesh$probe_service$mesh_pb.ServiceMeshMetric,
        responseType: service$mesh$probe_service$mesh_pb.MeshProbeDownstream,
        requestSerialize: serialize_ServiceMeshMetric,
        requestDeserialize: deserialize_ServiceMeshMetric,
        responseSerialize: serialize_MeshProbeDownstream,
        responseDeserialize: deserialize_MeshProbeDownstream,
    },
};
exports.ServiceMeshMetricServiceClient = grpc.makeGenericClientConstructor(ServiceMeshMetricServiceService);
//# sourceMappingURL=service-mesh_grpc_pb.js.map