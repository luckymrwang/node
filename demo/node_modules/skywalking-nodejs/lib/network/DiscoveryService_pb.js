/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Common_pb = require('./Common_pb.js');
var Downstream_pb = require('./Downstream_pb.js');
goog.exportSymbol('proto.ApplicationInstance', null, global);
goog.exportSymbol('proto.ApplicationInstanceHeartbeat', null, global);
goog.exportSymbol('proto.ApplicationInstanceMapping', null, global);
goog.exportSymbol('proto.ApplicationInstanceRecover', null, global);
goog.exportSymbol('proto.OSInfo', null, global);
goog.exportSymbol('proto.ServiceNameCollection', null, global);
goog.exportSymbol('proto.ServiceNameElement', null, global);
goog.exportSymbol('proto.ServiceNameMappingCollection', null, global);
goog.exportSymbol('proto.ServiceNameMappingElement', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplicationInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplicationInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ApplicationInstance.displayName = 'proto.ApplicationInstance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplicationInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplicationInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplicationInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    applicationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    agentuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    registertime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    osinfo: (f = msg.getOsinfo()) && proto.OSInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplicationInstance}
 */
proto.ApplicationInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplicationInstance;
  return proto.ApplicationInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplicationInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplicationInstance}
 */
proto.ApplicationInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentuuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegistertime(value);
      break;
    case 4:
      var value = new proto.OSInfo;
      reader.readMessage(value,proto.OSInfo.deserializeBinaryFromReader);
      msg.setOsinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplicationInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplicationInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplicationInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAgentuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegistertime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOsinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OSInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 applicationId = 1;
 * @return {number}
 */
proto.ApplicationInstance.prototype.getApplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ApplicationInstance.prototype.setApplicationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string agentUUID = 2;
 * @return {string}
 */
proto.ApplicationInstance.prototype.getAgentuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ApplicationInstance.prototype.setAgentuuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 registerTime = 3;
 * @return {number}
 */
proto.ApplicationInstance.prototype.getRegistertime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ApplicationInstance.prototype.setRegistertime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional OSInfo osinfo = 4;
 * @return {?proto.OSInfo}
 */
proto.ApplicationInstance.prototype.getOsinfo = function() {
  return /** @type{?proto.OSInfo} */ (
    jspb.Message.getWrapperField(this, proto.OSInfo, 4));
};


/** @param {?proto.OSInfo|undefined} value */
proto.ApplicationInstance.prototype.setOsinfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ApplicationInstance.prototype.clearOsinfo = function() {
  this.setOsinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplicationInstance.prototype.hasOsinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplicationInstanceMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplicationInstanceMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ApplicationInstanceMapping.displayName = 'proto.ApplicationInstanceMapping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplicationInstanceMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplicationInstanceMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplicationInstanceMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstanceMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    applicationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    applicationinstanceid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplicationInstanceMapping}
 */
proto.ApplicationInstanceMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplicationInstanceMapping;
  return proto.ApplicationInstanceMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplicationInstanceMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplicationInstanceMapping}
 */
proto.ApplicationInstanceMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationinstanceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplicationInstanceMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplicationInstanceMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplicationInstanceMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstanceMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getApplicationinstanceid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 applicationId = 1;
 * @return {number}
 */
proto.ApplicationInstanceMapping.prototype.getApplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ApplicationInstanceMapping.prototype.setApplicationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 applicationInstanceId = 2;
 * @return {number}
 */
proto.ApplicationInstanceMapping.prototype.getApplicationinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ApplicationInstanceMapping.prototype.setApplicationinstanceid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplicationInstanceRecover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplicationInstanceRecover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ApplicationInstanceRecover.displayName = 'proto.ApplicationInstanceRecover';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplicationInstanceRecover.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplicationInstanceRecover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplicationInstanceRecover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstanceRecover.toObject = function(includeInstance, msg) {
  var f, obj = {
    applicationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    applicationinstanceid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    registertime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    osinfo: (f = msg.getOsinfo()) && proto.OSInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplicationInstanceRecover}
 */
proto.ApplicationInstanceRecover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplicationInstanceRecover;
  return proto.ApplicationInstanceRecover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplicationInstanceRecover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplicationInstanceRecover}
 */
proto.ApplicationInstanceRecover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationinstanceid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegistertime(value);
      break;
    case 4:
      var value = new proto.OSInfo;
      reader.readMessage(value,proto.OSInfo.deserializeBinaryFromReader);
      msg.setOsinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplicationInstanceRecover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplicationInstanceRecover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplicationInstanceRecover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstanceRecover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getApplicationinstanceid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRegistertime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOsinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OSInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 applicationId = 1;
 * @return {number}
 */
proto.ApplicationInstanceRecover.prototype.getApplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ApplicationInstanceRecover.prototype.setApplicationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 applicationInstanceId = 2;
 * @return {number}
 */
proto.ApplicationInstanceRecover.prototype.getApplicationinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ApplicationInstanceRecover.prototype.setApplicationinstanceid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 registerTime = 3;
 * @return {number}
 */
proto.ApplicationInstanceRecover.prototype.getRegistertime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ApplicationInstanceRecover.prototype.setRegistertime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional OSInfo osinfo = 4;
 * @return {?proto.OSInfo}
 */
proto.ApplicationInstanceRecover.prototype.getOsinfo = function() {
  return /** @type{?proto.OSInfo} */ (
    jspb.Message.getWrapperField(this, proto.OSInfo, 4));
};


/** @param {?proto.OSInfo|undefined} value */
proto.ApplicationInstanceRecover.prototype.setOsinfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ApplicationInstanceRecover.prototype.clearOsinfo = function() {
  this.setOsinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ApplicationInstanceRecover.prototype.hasOsinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplicationInstanceHeartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplicationInstanceHeartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ApplicationInstanceHeartbeat.displayName = 'proto.ApplicationInstanceHeartbeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplicationInstanceHeartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplicationInstanceHeartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplicationInstanceHeartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstanceHeartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    applicationinstanceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heartbeattime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplicationInstanceHeartbeat}
 */
proto.ApplicationInstanceHeartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplicationInstanceHeartbeat;
  return proto.ApplicationInstanceHeartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplicationInstanceHeartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplicationInstanceHeartbeat}
 */
proto.ApplicationInstanceHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationinstanceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeartbeattime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplicationInstanceHeartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplicationInstanceHeartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplicationInstanceHeartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplicationInstanceHeartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationinstanceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeartbeattime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 applicationInstanceId = 1;
 * @return {number}
 */
proto.ApplicationInstanceHeartbeat.prototype.getApplicationinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ApplicationInstanceHeartbeat.prototype.setApplicationinstanceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 heartbeatTime = 2;
 * @return {number}
 */
proto.ApplicationInstanceHeartbeat.prototype.getHeartbeattime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ApplicationInstanceHeartbeat.prototype.setHeartbeattime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OSInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OSInfo.repeatedFields_, null);
};
goog.inherits(proto.OSInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OSInfo.displayName = 'proto.OSInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OSInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OSInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.OSInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OSInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OSInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    osname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    processno: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ipv4sList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OSInfo}
 */
proto.OSInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OSInfo;
  return proto.OSInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OSInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OSInfo}
 */
proto.OSInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessno(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addIpv4s(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OSInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OSInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OSInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OSInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOsname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProcessno();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIpv4sList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string osName = 1;
 * @return {string}
 */
proto.OSInfo.prototype.getOsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OSInfo.prototype.setOsname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string hostname = 2;
 * @return {string}
 */
proto.OSInfo.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.OSInfo.prototype.setHostname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 processNo = 3;
 * @return {number}
 */
proto.OSInfo.prototype.getProcessno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.OSInfo.prototype.setProcessno = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string ipv4s = 4;
 * @return {!Array.<string>}
 */
proto.OSInfo.prototype.getIpv4sList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.OSInfo.prototype.setIpv4sList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.OSInfo.prototype.addIpv4s = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.OSInfo.prototype.clearIpv4sList = function() {
  this.setIpv4sList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceNameCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceNameCollection.repeatedFields_, null);
};
goog.inherits(proto.ServiceNameCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceNameCollection.displayName = 'proto.ServiceNameCollection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceNameCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceNameCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceNameCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceNameCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.ServiceNameElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceNameCollection}
 */
proto.ServiceNameCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceNameCollection;
  return proto.ServiceNameCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceNameCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceNameCollection}
 */
proto.ServiceNameCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ServiceNameElement;
      reader.readMessage(value,proto.ServiceNameElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceNameCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceNameCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceNameCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ServiceNameElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ServiceNameElement elements = 1;
 * @return {!Array.<!proto.ServiceNameElement>}
 */
proto.ServiceNameCollection.prototype.getElementsList = function() {
  return /** @type{!Array.<!proto.ServiceNameElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServiceNameElement, 1));
};


/** @param {!Array.<!proto.ServiceNameElement>} value */
proto.ServiceNameCollection.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ServiceNameElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServiceNameElement}
 */
proto.ServiceNameCollection.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ServiceNameElement, opt_index);
};


proto.ServiceNameCollection.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceNameMappingCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceNameMappingCollection.repeatedFields_, null);
};
goog.inherits(proto.ServiceNameMappingCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceNameMappingCollection.displayName = 'proto.ServiceNameMappingCollection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceNameMappingCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceNameMappingCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceNameMappingCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceNameMappingCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameMappingCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.ServiceNameMappingElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceNameMappingCollection}
 */
proto.ServiceNameMappingCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceNameMappingCollection;
  return proto.ServiceNameMappingCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceNameMappingCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceNameMappingCollection}
 */
proto.ServiceNameMappingCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ServiceNameMappingElement;
      reader.readMessage(value,proto.ServiceNameMappingElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceNameMappingCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceNameMappingCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceNameMappingCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameMappingCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ServiceNameMappingElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ServiceNameMappingElement elements = 1;
 * @return {!Array.<!proto.ServiceNameMappingElement>}
 */
proto.ServiceNameMappingCollection.prototype.getElementsList = function() {
  return /** @type{!Array.<!proto.ServiceNameMappingElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServiceNameMappingElement, 1));
};


/** @param {!Array.<!proto.ServiceNameMappingElement>} value */
proto.ServiceNameMappingCollection.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ServiceNameMappingElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServiceNameMappingElement}
 */
proto.ServiceNameMappingCollection.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ServiceNameMappingElement, opt_index);
};


proto.ServiceNameMappingCollection.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceNameMappingElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServiceNameMappingElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceNameMappingElement.displayName = 'proto.ServiceNameMappingElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceNameMappingElement.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceNameMappingElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceNameMappingElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameMappingElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    element: (f = msg.getElement()) && proto.ServiceNameElement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceNameMappingElement}
 */
proto.ServiceNameMappingElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceNameMappingElement;
  return proto.ServiceNameMappingElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceNameMappingElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceNameMappingElement}
 */
proto.ServiceNameMappingElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceid(value);
      break;
    case 2:
      var value = new proto.ServiceNameElement;
      reader.readMessage(value,proto.ServiceNameElement.deserializeBinaryFromReader);
      msg.setElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceNameMappingElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceNameMappingElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceNameMappingElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameMappingElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getElement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ServiceNameElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 serviceId = 1;
 * @return {number}
 */
proto.ServiceNameMappingElement.prototype.getServiceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServiceNameMappingElement.prototype.setServiceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ServiceNameElement element = 2;
 * @return {?proto.ServiceNameElement}
 */
proto.ServiceNameMappingElement.prototype.getElement = function() {
  return /** @type{?proto.ServiceNameElement} */ (
    jspb.Message.getWrapperField(this, proto.ServiceNameElement, 2));
};


/** @param {?proto.ServiceNameElement|undefined} value */
proto.ServiceNameMappingElement.prototype.setElement = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ServiceNameMappingElement.prototype.clearElement = function() {
  this.setElement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServiceNameMappingElement.prototype.hasElement = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceNameElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServiceNameElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceNameElement.displayName = 'proto.ServiceNameElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceNameElement.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceNameElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceNameElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    applicationid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    srcspantype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceNameElement}
 */
proto.ServiceNameElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceNameElement;
  return proto.ServiceNameElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceNameElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceNameElement}
 */
proto.ServiceNameElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationid(value);
      break;
    case 3:
      var value = /** @type {!proto.SpanType} */ (reader.readEnum());
      msg.setSrcspantype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceNameElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceNameElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceNameElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceNameElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApplicationid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSrcspantype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string serviceName = 1;
 * @return {string}
 */
proto.ServiceNameElement.prototype.getServicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ServiceNameElement.prototype.setServicename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 applicationId = 2;
 * @return {number}
 */
proto.ServiceNameElement.prototype.getApplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ServiceNameElement.prototype.setApplicationid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SpanType srcSpanType = 3;
 * @return {!proto.SpanType}
 */
proto.ServiceNameElement.prototype.getSrcspantype = function() {
  return /** @type {!proto.SpanType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SpanType} value */
proto.ServiceNameElement.prototype.setSrcspantype = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto);
